Message de SUBMIT ET GRISER LES CHAMPS SI LE CANDIDAT A DEJA FAIT L action ✅(l form kimchi)

1MO ---->> 30MO  ✅

upload fichier dropify  ✅

Popup success et refresh de la page avec grid recapitulatif + down button for next stage.✅

Apogge de l'utudiant .pdf pour le nom de pdf ✅

teacher ikon ando CRUD table l kola filiere ichof biha les dossiers de stage + recommendation rapport pour biblio✅

reçu provisoire d'envoi de dossier (definitif après validation).❌

later f biblio we should add guest accounts.

migration {
    t_etudiant ✅
    t_academie  ✅
    t_categorie_socio_proffesio ✅
    t_commune ✅
    t_departement ✅
    t_diplome✅
    t_diplomes✅
    t_diplome_enseigne✅
    t_dossier_stage ✅
    t_element_etape  ✅
    t_etablissement✅
    t_etape_diplome ✅
    t_etudiant_filiere ✅
    t_fonction ✅
    t_grade ✅
    t_loceaux ✅
    t_pays ✅
    t_personnel✅
    t_prof_element ✅
    t_province_et_prefecture ✅ 
    t_region✅ 
    t_serie_bac✅
    t_service✅
    t_situationadmin✅
    t_specialite✅
    t_type_etablissement✅
    t_type_handicap✅
    t_type_handicap✅
    t_type_loceaux✅ 
    t_type_personnel✅
    t_universite✅
}





jib les teachers f les filiere bach ndiro correspondance mabin l etudiant li uploada stage
o teacher dyalo bach mankhltoch bin kolchi. ✅

Encadrement nzido foreign key end etudiant dyal teacher bach kola encadrant ybano lih gher les etudiant li m encadre ✅

ntestew ila kan user deja m connecter ydiiiiih l dash machi /hooo✅

teacher rah mazal kimchi l dash admin f lewel ✅

id on null f upload ✅ (ila kan student khassk trslo b excel)

authenticationcontroller mazal kigenerer apogee men 1 tal 99999 ... ✅

n9alleb ela notif ✅

if user teacher khassno ymchi also -> t_personnel  ✅

registerController ba9i fih appogee men 100000 ->9999999 

disconnect clickable once ✅

prof i9ed ieawd ydir edit message plusieurs fois.✅

une fois teacher est ajouté on dois lui  ajouter aussi dans la table personnel ✅

il faut ajouter champs id_dip (li ankon creeit ) dans les headers d'excel ✅

scenarios a verifier : creation des filieres kolhom -> creation d'un etudiant correspond a chaque filiere 
+creation des teachers pour chaque filiere  ->upload des stages pour chaque etudiant ->  verification des uploads par les teachers 
->envoi des texts messages au etudiants ->verification des texts-> ✅

-> mni l prof i disapprovi khass modification t enabla✅

-> datatable dyal admin mazal mam9addach✅

ostad ila dar recommand l chi stage khasso ikteb lina l3onwan 3la hssab l bibliotheque (solved, student howa li kayktb title)✅

khass tkon validation reversible ✅ normally no 

khass tkon recommendation disabled if validation not yet 1✅

Save approvals : mn mora maki validi teacher l les etudiant o ki  
clique ela save approval kanakhdo les etudiants validé o kanssiftohom l admin. 😁 en cours✅

etudiant obligé ikteb sujet d rapport✅

type rapport khasso ikon obligatory ✅

etudiant ila kan 2eme année khass itle3lo l form dyal upload 2 merrat ✅

ila lprof hayed l validation katb9a recommandation 1 f mysql.✅

ila admin valida chi dossier stage khass l prof mayb9ach 9aaad idir ta ACTION ✅

popup sending notif to student should handle emptiness.(notification par audio khass materselch ila kan audio vide.)✅

notes historique mayb99ach i t écrasa.✅



logo Codepen kitla3 f favicon✅


retour f Module Management khsso ytsla7❌



AttendanceController protected
Authenticationcontroller protected
Controller protected
DashboardController protected
ElementController protected
ElememtPedagogiqueController protected
libraryController protected
LogController protected
NotificatioController protected
PersonnelElementPedagoguiqueController prtected
ProfileController protected 
RetraitController protected
StudentController protected
TerminalController protected



[old controller]

<?php

namespace App\Http\Controllers;

use App\Models\Local;
use App\Models\Personnel;
use App\Models\Attendance;
use App\Models\Etudiant;
use App\Models\ElementPedagogique;
use App\Models\TempScannedStudent;
use Illuminate\Http\Request;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Carbon\Carbon;
use Illuminate\Support\Str;

class AttendanceController extends Controller
{
    public function showAttendanceForm()
    {
        if (!auth()->user()->hasRole('teacher')) {
            abort(403);
        }

        $active_tab = 'attendance';

        $locals = Local::pluck('nom_locaux', 'id');
        $personnels = Personnel::pluck('nom_personnel', 'id');
        $elementsPedago = ElementPedagogique::pluck('intitule_element', 'id');
        $annees = Etudiant::select('Annee')->distinct()->pluck('Annee');
        $filieres = Etudiant::select('FILIERE')->distinct()->pluck('FILIERE');
        $anneeUnis = Etudiant::select('annee_uni')->distinct()->pluck('annee_uni');

        return view('attendance', compact('active_tab', 'locals', 'personnels', 'elementsPedago', 'annees', 'filieres', 'anneeUnis'));
    }

    public function showinputBlade()
    {
        if (!auth()->user()->hasRole('student')) {
            abort(403);
        }
        $active_tab = 'attendance';
        return view('manual_entry', compact('active_tab'));
    }

    public function showattendancedashboard()
    {
        if (!auth()->user()->hasRole('student')) {
            abort(403);
        }
        $active_tab = 'attendance';
        return view('attendancedashboard', compact('active_tab'));
    }

    public function generateQrCode(Request $request)
    {
        if (!auth()->user()->hasRole('teacher')) {
            abort(403);
        }

        $active_tab = 'attendance';

        $validatedData = $request->validate([
            'id_local' => 'required|exists:t_locaux,id',
            'id_personnel' => 'required|exists:t_personnel,id',
            'id_element_pedago' => 'required|exists:t_modules_etape,id',
            'annee' => 'required|string',
            'filiere' => 'required|string',
            'annee_uni' => 'required|string',
            'periode_seance' => 'required|string',
        ]);

        $scannedStudentIds = TempScannedStudent::where('id_local', $validatedData['id_local'])
        ->where('id_personnel', $validatedData['id_personnel'])
        ->where('id_element_pedago', $validatedData['id_element_pedago'])
        ->where('annee_uni', $validatedData['annee_uni'])
        ->where('période_seance', $validatedData['periode_seance'])
        ->pluck('id_etu')
        ->toArray();

        $url = route('scan.qr.code', [
            'id_local' => $validatedData['id_local'],
            'id_personnel' => $validatedData['id_personnel'],
            'id_element_pedago' => $validatedData['id_element_pedago'],
            'annee' => $validatedData['annee'],
            'filiere' => $validatedData['filiere'],
            'annee_uni' => $validatedData['annee_uni'],
            'periode_seance' => $validatedData['periode_seance'],
        ]);

        $qrCode = QrCode::format('png')->size(500)->generate($url);

        Session::put('attendance_data', $validatedData);

        // Fetch students based on the validated data
        $students = Etudiant::where('Annee', $validatedData['annee'])
            ->where('FILIERE', $validatedData['filiere'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->get();

        // Pass the students and QR code to the view
        return view('attendance_qr_code', compact('qrCode', 'active_tab', 'students','scannedStudentIds'));
    }



    public function handleQrCodeScan(Request $request)
    {
        $active_tab = 'attendance';

        $attendanceData = $request->only(['id_local', 'id_personnel', 'id_element_pedago', 'annee', 'filiere', 'annee_uni', 'periode_seance']);

        $student = auth()->user()->etudiant;

        if (!$student) {
            return redirect()->route('attendance.failure')->with('message', 'Student does not exist');
        }

        $studentId = $student->id;

        $result = $this->markAttendance($attendanceData, $studentId);

        if ($result['success']) {
            return redirect()->route('attendance.success');
        } else {
            return redirect()->route('attendance.failure')->with('message', $result['message']);
        }
    }

    public function markAttendance($qrData, $studentId)
    {
        $studentExists = Etudiant::find($studentId);

        if (!$studentExists) {
            return ['success' => false, 'message' => 'Student does not exist'];
        }

        // Check if the student has already been scanned for the current session
        $alreadyScanned = TempScannedStudent::where('id_etu', $studentId)
            ->where('id_local', $qrData['id_local'])
            ->where('id_personnel', $qrData['id_personnel'])
            ->where('id_element_pedago', $qrData['id_element_pedago'])
            ->where('annee_uni', $qrData['annee_uni'])
            ->where('période_seance', $qrData['periode_seance'])
            ->exists();

        if ($alreadyScanned) {
            return ['success' => true, 'message' => 'Attendance already marked for this session'];
        } else {
            TempScannedStudent::create([
                'id_etu' => $studentId,
                'id_local' => $qrData['id_local'],
                'id_personnel' => $qrData['id_personnel'],
                'id_element_pedago' => $qrData['id_element_pedago'],
                'annee_uni' => $qrData['annee_uni'],
                'période_seance' => $qrData['periode_seance'],
            ]);

            return ['success' => true, 'message' => 'Attendance marked successfully'];
        }

        // Store scanned students' data temporarily

    }

    public function identifyAndStoreAbsentStudents(Request $request)
    {
        $active_tab = 'attendance';

        // Retrieve attendance data from session
        $validatedData = Session::get('attendance_data');

        if (!$validatedData) {
            return redirect()->route('attendance.failure')->with('message', 'No attendance data found.');
        }

        // Retrieve all students based on the given criteria
        $students = Etudiant::where('Annee', $validatedData['annee'])
            ->where('FILIERE', $validatedData['filiere'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->get();

        // Retrieve IDs of students who scanned the QR code from the temporary table
        $scannedStudentIds = TempScannedStudent::where('id_local', $validatedData['id_local'])
            ->where('id_personnel', $validatedData['id_personnel'])
            ->where('id_element_pedago', $validatedData['id_element_pedago'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->where('période_seance', $validatedData['periode_seance'])
            ->pluck('id_etu')
            ->toArray();

        // Iterate over all students and mark those who didn't scan
        foreach ($students as $student) {
            $studentId = $student->id;
            if (!in_array($studentId, $scannedStudentIds)) {
                Attendance::create(
                    [
                        'id_etu' => $studentId,
                        'id_local' => $validatedData['id_local'],
                        'id_personnel' => $validatedData['id_personnel'],
                        'id_element_pedago' => $validatedData['id_element_pedago'],
                        'annee_uni' => $validatedData['annee_uni'],
                        'période_seance' => $validatedData['periode_seance'],
                        'is_absent' => true,
                        'Annee' => $validatedData['annee'],
                        'FILIERE' => $validatedData['filiere'],
                        'created_at' => Carbon::now(),
                        'updated_at' => Carbon::now(),
                    ]
                );
            }
        }

        // Clear scanned students from the temporary table
        TempScannedStudent::where('id_local', $validatedData['id_local'])
            ->where('id_personnel', $validatedData['id_personnel'])
            ->where('id_element_pedago', $validatedData['id_element_pedago'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->where('période_seance', $validatedData['periode_seance'])
            ->delete();

        return redirect()->route('dashboard')->with(['message'=>'Absent students identified and stored.','success'=>'true']);
    }
    public function getScannedList(Request $request)
    {
        // Fetch all students for the current attendance session
        $validatedData = Session::get('attendance_data');

        if (!$validatedData) {
            return response()->json(['students' => []]);
        }

        $students = Etudiant::where('Annee', $validatedData['annee'])
            ->where('FILIERE', $validatedData['filiere'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->get();

        $scannedStudentIds = TempScannedStudent::where('id_local', $validatedData['id_local'])
            ->where('id_personnel', $validatedData['id_personnel'])
            ->where('id_element_pedago', $validatedData['id_element_pedago'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->where('période_seance', $validatedData['periode_seance'])
            ->pluck('id_etu')
            ->toArray();

        foreach ($students as $student) {
            $student->is_scanned = in_array($student->id, $scannedStudentIds);
        }

        return response()->json(['students' => $students]);
    }

    public function markAsPresent($id)
    {
        $studentId = $id;

        // Check if the student is already marked as present
        $attendanceRecord = Attendance::where('id_etu', $studentId)
            ->where('id_local', Session::get('attendance_data')['id_local'])
            ->where('id_personnel', Session::get('attendance_data')['id_personnel'])
            ->where('id_element_pedago', Session::get('attendance_data')['id_element_pedago'])
            ->where('annee_uni', Session::get('attendance_data')['annee_uni'])
            ->where('période_seance', Session::get('attendance_data')['periode_seance'])
            ->exists();

        if ($attendanceRecord) {
            return response()->json(['success' => false, 'message' => 'Attendance already marked.']);
        } else {
            TempScannedStudent::create([
                'id_etu' => $studentId,
                'id_local' => Session::get('attendance_data')['id_local'],
                'id_personnel' => Session::get('attendance_data')['id_personnel'],
                'id_element_pedago' => Session::get('attendance_data')['id_element_pedago'],
                'annee_uni' => Session::get('attendance_data')['annee_uni'],
                'période_seance' => Session::get('attendance_data')['periode_seance'],
            ]);

            return response()->json(['success' => true]);
        }
    }
}  


    /*public function getScannedCount(Request $request)
    {
        $validatedData = Session::get('attendance_data');

        if (!$validatedData) {
            return response()->json(['count' => 0]);
        }

        // Retrieve the count of unique scanned students from the temporary table
        $scannedCount = TempScannedStudent::where('id_local', $validatedData['id_local'])
            ->where('id_personnel', $validatedData['id_personnel'])
            ->where('id_element_pedago', $validatedData['id_element_pedago'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->where('période_seance', $validatedData['période_seance'])
            ->count();

        return response()->json(['count' => $scannedCount]);
    }*/



    /*public function handleManualEntry(Request $request)
    {
        $active_tab = 'attendance';

        $validatedData = $request->validate([
            'unique_code' => 'required|string',
        ]);

        $uniqueCode = $validatedData['unique_code'];

        // Retrieve attendance data from the session
        $attendanceData = Session::get('attendance_data');

        if (!$attendanceData) {
            return redirect()->route('attendance.failure')->with('message', 'No attendance data found.');
        }

        // Check if the provided code matches the session code
        if ($uniqueCode !== Session::get('unique_code')) {
            return redirect()->route('attendance.failure')->with('message', 'Invalid attendance code.');
        }

        $student = auth()->user()->etudiant;

        if (!$student) {
            return redirect()->route('attendance.failure')->with('message', 'Student does not exist');
        }

        $studentId = $student->id;

        $result = $this->markAttendance($attendanceData, $studentId);

        if ($result['success']) {
            return redirect()->route('attendance.success');
        } else {
            return redirect()->route('attendance.failure')->with('message', $result['message']);
        }
    }
   
   // Add a method to display the manual entry form
    public function showManualEntryForm()
    {
        if (!auth()->user()->hasRole('student')) {
            abort(403);
        }
        $active_tab = 'attendance';
        return view('manual_entry', compact('active_tab'));
    }*/









[new controller]


<?php

namespace App\Http\Controllers;

use App\Models\Local;
use App\Models\Personnel;
use App\Models\Attendance;
use App\Models\Etudiant;
use App\Models\ElementPedagogique;
use App\Models\TempScannedStudent;
use App\Models\TypeSeance;
use Illuminate\Http\Request;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Carbon\Carbon;

class AttendanceController extends Controller
{
    public function showAttendanceForm()
    {
        if (!auth()->user()->hasRole('teacher')) {
            abort(403);
        }

        $active_tab = 'attendance';

        $locals = Local::pluck('nom_locaux', 'id');
        $personnels = Personnel::pluck('nom_personnel', 'id');
        $elementsPedago = ElementPedagogique::pluck('intitule_element', 'id');
        $annees = Etudiant::select('Annee')->distinct()->pluck('Annee');
        $filieres = Etudiant::select('FILIERE')->distinct()->pluck('FILIERE');
        $anneeUnis = Etudiant::select('annee_uni')->distinct()->pluck('annee_uni');
        $typeSeances = TypeSeance::select('abreviation')->distinct()->pluck('abreviation');

        return view('attendance', compact('active_tab', 'locals', 'personnels', 'elementsPedago', 'annees', 'filieres', 'anneeUnis', 'typeSeances'));
    }

    public function showattendancedashboard()
    {
        if (!auth()->user()->hasRole('student')) {
            abort(403);
        }
        $active_tab = 'attendance';
        return view('attendancedashboard', compact('active_tab'));
    }

    public function generateQrCode(Request $request)
    {
        if (!auth()->user()->hasRole('teacher')) {
            abort(403);
        }

        $active_tab = 'attendance';

        $validatedData = $request->validate([
            'id_local' => 'required|exists:t_locaux,id',
            'id_personnel' => 'required|exists:t_personnel,id',
            'id_element_pedago' => 'required|exists:t_modules_etape,id',
            'annee' => 'required|string',
            'filiere' => 'required|string',
            'annee_uni' => 'required|string',
            'periode_seance' => 'required|string',
            'type_seance' => 'required|string',
        ]);

        $scannedStudentIds = TempScannedStudent::where('id_local', $validatedData['id_local'])
            ->where('id_personnel', $validatedData['id_personnel'])
            ->where('id_element_pedago', $validatedData['id_element_pedago'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->where('période_seance', $validatedData['periode_seance'])
            ->where('type_seance', $validatedData['type_seance'])
            ->pluck('id_etu')
            ->toArray();

        $url = route('scan.qr.code', array_merge($validatedData, [
            'type_seance' => $validatedData['type_seance'],
        ]));

        $qrCode = QrCode::format('png')->size(500)->generate($url);

        Session::put('attendance_data', $validatedData);

        $students = Etudiant::where('Annee', $validatedData['annee'])
            ->where('FILIERE', $validatedData['filiere'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->get();

        return view('attendance_qr_code', compact('qrCode', 'active_tab', 'students', 'scannedStudentIds'));
    }

    public function handleQrCodeScan(Request $request)
    {
        $active_tab = 'attendance';

        $attendanceData = $request->only(['id_local', 'id_personnel', 'id_element_pedago', 'annee', 'filiere', 'annee_uni', 'periode_seance', 'type_seance']);

        $student = auth()->user()->etudiant;

        if (!$student) {
            return redirect()->route('attendance.failure')->with('message', 'Student does not exist');
        }

        $studentId = $student->id;

        $result = $this->markAttendance($attendanceData, $studentId);

        if ($result['success']) {
            return redirect()->route('attendance.success');
        } else {
            return redirect()->route('attendance.failure')->with('message', $result['message']);
        }
    }

    public function markAttendance($qrData, $studentId)
    {
        $studentExists = Etudiant::find($studentId);

        if (!$studentExists) {
            return ['success' => false, 'message' => 'Student does not exist'];
        }

        $alreadyScanned = TempScannedStudent::where('id_etu', $studentId)
            ->where('id_local', $qrData['id_local'])
            ->where('id_personnel', $qrData['id_personnel'])
            ->where('id_element_pedago', $qrData['id_element_pedago'])
            ->where('annee_uni', $qrData['annee_uni'])
            ->where('période_seance', $qrData['periode_seance'])
            ->where('type_seance', $qrData['type_seance'])
            ->exists();

        if ($alreadyScanned) {
            return ['success' => true, 'message' => 'Attendance already marked for this session'];
        } else {
            TempScannedStudent::create([
                'id_etu' => $studentId,
                'id_local' => $qrData['id_local'],
                'id_personnel' => $qrData['id_personnel'],
                'id_element_pedago' => $qrData['id_element_pedago'],
                'annee_uni' => $qrData['annee_uni'],
                'période_seance' => $qrData['periode_seance'],
                'type_seance' => $qrData['type_seance'],
            ]);

            return ['success' => true, 'message' => 'Attendance marked successfully'];
        }
    }

    public function identifyAndStoreAbsentStudents(Request $request)
    {
        $active_tab = 'attendance';

        // Retrieve attendance data from session
        $validatedData = Session::get('attendance_data');

        if (!$validatedData) {
            return redirect()->route('attendance.failure')->with('message', 'No attendance data found.');
        }

        // Retrieve all students based on the given criteria
        $students = Etudiant::where('Annee', $validatedData['annee'])
            ->where('FILIERE', $validatedData['filiere'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->get();

        // Retrieve IDs of students who scanned the QR code from the temporary table
        $scannedStudentIds = TempScannedStudent::where('id_local', $validatedData['id_local'])
            ->where('id_personnel', $validatedData['id_personnel'])
            ->where('id_element_pedago', $validatedData['id_element_pedago'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->where('période_seance', $validatedData['periode_seance'])
            ->pluck('id_etu')
            ->toArray();

        // Iterate over all students and mark those who didn't scan
        foreach ($students as $student) {
            $studentId = $student->id;
            if (!in_array($studentId, $scannedStudentIds)) {
                Attendance::create(
                    [
                        'id_etu' => $studentId,
                        'id_local' => $validatedData['id_local'],
                        'id_personnel' => $validatedData['id_personnel'],
                        'id_element_pedago' => $validatedData['id_element_pedago'],
                        'annee_uni' => $validatedData['annee_uni'],
                        'période_seance' => $validatedData['periode_seance'],
                        'is_absent' => true,
                        'Annee' => $validatedData['annee'],
                        'FILIERE' => $validatedData['filiere'],
                        'created_at' => Carbon::now(),
                        'updated_at' => Carbon::now(),
                    ]
                );
            }
        }

        // Clear scanned students from the temporary table
        TempScannedStudent::where('id_local', $validatedData['id_local'])
            ->where('id_personnel', $validatedData['id_personnel'])
            ->where('id_element_pedago', $validatedData['id_element_pedago'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->where('période_seance', $validatedData['periode_seance'])
            ->delete();

        return redirect()->route('dashboard')->with(['message' => 'Absent students identified and stored.', 'success' => 'true']);
    }

    public function getScannedCount()
    {
        $count = TempScannedStudent::count();
        return response()->json(['count' => $count]);
    }

    public function getScannedList()
    {
        $students = Etudiant::all()->map(function ($student) {
            return [
                'id' => $student->id,
                'name' => $student->nom_fr . ' ' . $student->prenom_fr,
                'is_scanned' => TempScannedStudent::where('id_etu', $student->id)->exists(),
            ];
        });

        return response()->json(['students' => $students]);
    }

    public function markAsPresent($id)
    {
        $studentId = $id;

        // Check if the student is already marked as present
        $attendanceRecord = Attendance::where('id_etu', $studentId)
            ->where('id_local', Session::get('attendance_data')['id_local'])
            ->where('id_personnel', Session::get('attendance_data')['id_personnel'])
            ->where('id_element_pedago', Session::get('attendance_data')['id_element_pedago'])
            ->where('annee_uni', Session::get('attendance_data')['annee_uni'])
            ->where('période_seance', Session::get('attendance_data')['periode_seance'])
            ->exists();

        if ($attendanceRecord) {
            return response()->json(['success' => false, 'message' => 'Attendance already marked.']);
        } else {
            TempScannedStudent::create([
                'id_etu' => $studentId,
                'id_local' => Session::get('attendance_data')['id_local'],
                'id_personnel' => Session::get('attendance_data')['id_personnel'],
                'id_element_pedago' => Session::get('attendance_data')['id_element_pedago'],
                'annee_uni' => Session::get('attendance_data')['annee_uni'],
                'période_seance' => Session::get('attendance_data')['periode_seance'],
            ]);

            return response()->json(['success' => true]);
        }
    }
    public function studentAttendanceStats()
    {
        if (!auth()->user()->hasRole('student')) {
            abort(403);
        }

        $active_tab = 'attendance';
        $student = auth()->user()->etudiant;
        $studentId = $student->id;

        // Get total sessions
        $totalSessions = \DB::table('t_attendance')->where('id_etu', $studentId)->count();

        // Get missed sessions
        $missedSessions = \DB::table('t_attendance')
            ->where('id_etu', $studentId)
            ->count();

        // Calculate attendance percentage
        $attendancePercentage = $totalSessions > 0 ?
            round((($totalSessions - $missedSessions) / $totalSessions) * 100, 2) : 0;

        // Get attendance by module
        $attendanceByModule = \DB::table('t_attendance')
            ->join('t_modules_etape', 't_modules_etape.id', '=', 't_attendance.id_element_pedago')
            ->where('t_attendance.id_etu', $studentId)
            ->select(
                't_modules_etape.intitule_element',
                \DB::raw('COUNT(*) as total_sessions'),
                \DB::raw('COUNT(*) as missed_sessions')
            )
            ->groupBy('t_modules_etape.intitule_element')
            ->get();

        // Get attendance trend (last 10 sessions)
        $attendanceTrend = \DB::table('t_attendance')
            ->where('id_etu', $studentId)
            ->orderBy('created_at', 'desc')
            ->take(10)
            ->get()
            ->map(function ($attendance) {
                return [
                    'date' => Carbon::parse($attendance->created_at)->format('Y-m-d'),
                    'status' => 'Absent'
                ];
            });

        return view('EtudiantStats', compact('totalSessions', 'missedSessions', 'attendancePercentage', 'attendanceByModule', 'attendanceTrend', 'active_tab'));
    }
}




    /*public function showinputBlade()
    {
        if (!auth()->user()->hasRole('student')) {
            abort(403);
        }
        $active_tab = 'attendance';
        return view('manual_entry', compact('active_tab'));
    }*/

    /*public function getScannedCount(Request $request)
    {
        $validatedData = Session::get('attendance_data');

        if (!$validatedData) {
            return response()->json(['count' => 0]);
        }

        // Retrieve the count of unique scanned students from the temporary table
        $scannedCount = TempScannedStudent::where('id_local', $validatedData['id_local'])
            ->where('id_personnel', $validatedData['id_personnel'])
            ->where('id_element_pedago', $validatedData['id_element_pedago'])
            ->where('annee_uni', $validatedData['annee_uni'])
            ->where('période_seance', $validatedData['période_seance'])
            ->count();

        return response()->json(['count' => $scannedCount]);
    }*/



    /*public function handleManualEntry(Request $request)
    {
        $active_tab = 'attendance';

        $validatedData = $request->validate([
            'unique_code' => 'required|string',
        ]);

        $uniqueCode = $validatedData['unique_code'];

        // Retrieve attendance data from the session
        $attendanceData = Session::get('attendance_data');

        if (!$attendanceData) {
            return redirect()->route('attendance.failure')->with('message', 'No attendance data found.');
        }

        // Check if the provided code matches the session code
        if ($uniqueCode !== Session::get('unique_code')) {
            return redirect()->route('attendance.failure')->with('message', 'Invalid attendance code.');
        }

        $student = auth()->user()->etudiant;

        if (!$student) {
            return redirect()->route('attendance.failure')->with('message', 'Student does not exist');
        }

        $studentId = $student->id;

        $result = $this->markAttendance($attendanceData, $studentId);

        if ($result['success']) {
            return redirect()->route('attendance.success');
        } else {
            return redirect()->route('attendance.failure')->with('message', $result['message']);
        }
    }
   
   // Add a method to display the manual entry form
    public function showManualEntryForm()
    {
        if (!auth()->user()->hasRole('student')) {
            abort(403);
        }
        $active_tab = 'attendance';
        return view('manual_entry', compact('active_tab'));
    }*/

























<!-- Voice Form -->
    <!--<form id="voiceForm" method="POST" action="{{ route('ADD-RAPPORT-COMMENT') }}" enctype="multipart/form-data">
        @csrf
        <input type="hidden" name="id_etu" id="id_etu_voice">

        <div class="disapprove-popup" id="voicePopup" style="display: none;">
            <div class="popup-content">
                <div id="voiceContainer">
                    <div class="voice-controls-container">
                        <button type="button" id="startRecordBtn" onclick="startRecording()" class="record-button">
                            <svg width="45px" height="45px" viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg" stroke-width="3" stroke="black" fill="none">
                                <path d="M47.67,28.43v3.38a15.67,15.67,0,0,1-31.34,0V28.43" stroke-linecap="round" />
                                <rect x="22.51" y="6.45" width="18.44" height="34.22" rx="8.89" stroke-linecap="round" />
                                <line x1="31.73" y1="57.34" x2="31.73" y2="47.71" stroke-linecap="round" />
                                <line x1="37.14" y1="57.55" x2="26.43" y2="57.55" stroke-linecap="round" />
                            </svg>
                        </button>
                        <button type="button" id="stopRecordBtn" style="display: none;" onclick="stopRecording()" class="stop-record-button">
                            <svg width="45px" height="45px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#00bd6b">
                                <g id="SVGRepo_bgCarrier" stroke-width="0" />
                                <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round" />
                                <g id="SVGRepo_iconCarrier">
                                    <path d="M3 10L3 14M7.5 11V13M12 6V18M16.5 3V21M21 10V14" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </g>
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="divaudio" style="display: flex;">
                    <audio id="audioPlayer" controls style="display: none;"></audio>
                    <button id="deleteVoiceBtn" onclick="deleteRecordedVoice(event)" style="display: none;" class="delete-voice-button">
                        <svg fill="#000000" width="50px" height="50px" viewBox="0 0 24 24" id="delete-alt-2" data-name="Flat Line" xmlns="http://www.w3.org/2000/svg" class="icon flat-line">
                            <path d="M17.07,20.07,18,7H6l.93,13.07a1,1,0,0,0,1,.93h8.14A1,1,0,0,0,17.07,20.07Z" style="fill: rgb(44, 169, 188); stroke-width: 2;"></path>
                            <path d="M16,7V4a1,1,0,0,0-1-1H9A1,1,0,0,0,8,4V7" style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;"></path>
                            <path d="M12,11v6M4,7H20M17.07,20.07,18,7H6l.93,13.07a1,1,0,0,0,1,.93h8.14A1,1,0,0,0,17.07,20.07Z" style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;"></path>
                        </svg>
                    </button>
                </div>

                <div class="popup-buttons">
                    <button type="button" class="button-cancel" onclick="hideVoicePopup()">Annuler</button>
                    <button type="button" class="button-send" onclick="submitVoiceForm({{ $user['id'] }})">Envoyer les mises à jours</button>
                </div>
            </div>
        </div>
    </form>
    
    <form id="textForm" method="POST" action="{{ route('ADD-RAPPORT-COMMENT') }}">
        @csrf
        <input type="hidden" name="id_etu" id="id_etu_text"> 

        <div class="disapprove-popup" id="textPopup" style="display: none;">
            <div class="popup-content">
                <label for="disapproveNote" style="font-weight: bold; color:#000">Notes de l'encadrant:</label>
                <div id="inputContainer">
                   
                    <textarea name="notification" id="disapproveNote" class="popup-input" rows="4"></textarea>
                </div>
                <div class="popup-buttons">
                    <button type="button" class="button-cancel" onclick="hideTextPopup()">Annuler</button>
                    <button type="button" class="button-send" onclick="submitTextForm({{ $user['id'] }})">
                        <svg width="50px" height="50px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M10.3009 13.6949L20.102 3.89742M10.5795 14.1355L12.8019 18.5804C13.339 19.6545 13.6075 20.1916 13.9458 20.3356C14.2394 20.4606 14.575 20.4379 14.8492 20.2747C15.1651 20.0866 15.3591 19.5183 15.7472 18.3818L19.9463 6.08434C20.2845 5.09409 20.4535 4.59896 20.3378 4.27142C20.2371 3.98648 20.013 3.76234 19.7281 3.66167C19.4005 3.54595 18.9054 3.71502 17.9151 4.05315L5.61763 8.2523C4.48114 8.64037 3.91289 8.83441 3.72478 9.15032C3.56153 9.42447 3.53891 9.76007 3.66389 10.0536C3.80791 10.3919 4.34498 10.6605 5.41912 11.1975L9.86397 13.42C10.041 13.5085 10.1295 13.5527 10.2061 13.6118C10.2742 13.6643 10.3352 13.7253 10.3876 13.7933C10.4468 13.87 10.491 13.9585 10.5795 14.1355Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </form>-->




